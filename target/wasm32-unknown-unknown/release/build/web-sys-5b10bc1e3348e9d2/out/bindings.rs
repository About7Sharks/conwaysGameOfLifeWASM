# [ allow ( bad_style ) ] # [ derive ( Debug , Clone , PartialEq , Eq ) ] # [ doc = "The `MessageEvent` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct MessageEvent { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_MessageEvent : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for MessageEvent { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for MessageEvent { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for MessageEvent { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self ) -> Self :: Abi { self . obj . into_abi ( ) } } impl OptionIntoWasmAbi for MessageEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a MessageEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for MessageEvent { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi ) -> Self { MessageEvent { obj : JsValue :: from_abi ( js ) . into ( ) , } } } impl OptionFromWasmAbi for MessageEvent { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a MessageEvent { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self ) -> Self :: Abi { ( & self . obj ) . into_abi ( ) } } impl RefFromWasmAbi for MessageEvent { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < MessageEvent > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js ) ; core :: mem :: ManuallyDrop :: new ( MessageEvent { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for MessageEvent { # [ inline ] fn from ( obj : JsValue ) -> MessageEvent { MessageEvent { obj : obj . into ( ) } } } impl AsRef < JsValue > for MessageEvent { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < MessageEvent > for MessageEvent { # [ inline ] fn as_ref ( & self ) -> & MessageEvent { self } } impl From < MessageEvent > for JsValue { # [ inline ] fn from ( obj : MessageEvent ) -> JsValue { obj . obj . into ( ) } } impl JsCast for MessageEvent { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_MessageEvent ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_MessageEvent ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( ) ; __widl_instanceof_MessageEvent ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { MessageEvent { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const MessageEvent ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < MessageEvent > for Object { # [ inline ] fn from ( obj : MessageEvent ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for MessageEvent { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < MessageEvent as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `new MessageEvent(..)` constructor, creating a new instance of `MessageEvent`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn new ( type_ : & str ) -> Result < MessageEvent , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_MessageEvent ( type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < MessageEvent as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_MessageEvent ( type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < MessageEvent as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( type_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ ) ; __widl_f_new_MessageEvent ( type_ ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < MessageEvent as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event ( & self , type_ : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( type_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ ) ; __widl_f_init_message_event_MessageEvent ( self_ , type_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles ( & self , type_ : & str , bubbles : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( type_ ) ; drop ( bubbles ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles ) ; __widl_f_init_message_event_with_bubbles_MessageEvent ( self_ , type_ , bubbles ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable ( & self , type_ : & str , bubbles : bool , cancelable : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( type_ ) ; drop ( bubbles ) ; drop ( cancelable ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent ( self_ , type_ , bubbles , cancelable ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable_and_data ( & self , type_ : & str , bubbles : bool , cancelable : bool , data : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( type_ ) ; drop ( bubbles ) ; drop ( cancelable ) ; drop ( data ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable ) ; let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent ( self_ , type_ , bubbles , cancelable , data ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin ( & self , type_ : & str , bubbles : bool , cancelable : bool , data : & :: wasm_bindgen :: JsValue , origin : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( type_ ) ; drop ( bubbles ) ; drop ( cancelable ) ; drop ( data ) ; drop ( origin ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable ) ; let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data ) ; let origin = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( origin ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent ( self_ , type_ , bubbles , cancelable , data , origin ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `initMessageEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id ( & self , type_ : & str , bubbles : bool , cancelable : bool , data : & :: wasm_bindgen :: JsValue , origin : & str , last_event_id : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , last_event_id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable : < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , origin : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , last_event_id : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( type_ ) ; drop ( bubbles ) ; drop ( cancelable ) ; drop ( data ) ; drop ( origin ) ; drop ( last_event_id ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let type_ = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ ) ; let bubbles = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles ) ; let cancelable = < bool as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable ) ; let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data ) ; let origin = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( origin ) ; let last_event_id = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( last_event_id ) ; __widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent ( self_ , type_ , bubbles , cancelable , data , origin , last_event_id ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_data_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `data` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn data ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_data_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_data_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_data_MessageEvent ( self_ ) } ; < :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_origin_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `origin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn origin ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_origin_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_origin_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_origin_MessageEvent ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_last_event_id_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `lastEventId` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn last_event_id ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_last_event_id_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_last_event_id_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_last_event_id_MessageEvent ( self_ ) } ; < String as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_source_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Object > as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `source` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn source ( & self , ) -> Option < :: js_sys :: Object > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_source_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Object > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_source_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Object > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_source_MessageEvent ( self_ ) } ; < Option < :: js_sys :: Object > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ports_MessageEvent ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MessageEvent as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl MessageEvent { # [ allow ( bad_style ) ] # [ doc = "The `ports` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports)\n\n*This API requires the following crate features to be activated: `MessageEvent`*" ] # [ allow ( clippy :: all ) ] pub fn ports ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_ports_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_ports_MessageEvent ( self_ : < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & MessageEvent as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_ports_MessageEvent ( self_ ) } ; < :: js_sys :: Array as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) } } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone , PartialEq , Eq ) ] # [ doc = "The `Worker` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Worker { obj : Object } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Worker : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Worker { fn describe ( ) { JsValue :: describe ( ) ; } } impl core :: ops :: Deref for Worker { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { & self . obj } } impl IntoWasmAbi for Worker { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self ) -> Self :: Abi { self . obj . into_abi ( ) } } impl OptionIntoWasmAbi for Worker { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Worker { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Worker { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi ) -> Self { Worker { obj : JsValue :: from_abi ( js ) . into ( ) , } } } impl OptionFromWasmAbi for Worker { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Worker { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self ) -> Self :: Abi { ( & self . obj ) . into_abi ( ) } } impl RefFromWasmAbi for Worker { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Worker > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js ) ; core :: mem :: ManuallyDrop :: new ( Worker { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) . into ( ) , } ) } } impl From < JsValue > for Worker { # [ inline ] fn from ( obj : JsValue ) -> Worker { Worker { obj : obj . into ( ) } } } impl AsRef < JsValue > for Worker { # [ inline ] fn as_ref ( & self ) -> & JsValue { self . obj . as_ref ( ) } } impl AsRef < Worker > for Worker { # [ inline ] fn as_ref ( & self ) -> & Worker { self } } impl From < Worker > for JsValue { # [ inline ] fn from ( obj : Worker ) -> JsValue { obj . obj . into ( ) } } impl JsCast for Worker { fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_instanceof_Worker ( val : u32 ) -> u32 ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_instanceof_Worker ( _ : u32 ) -> u32 { panic ! ( "cannot check instanceof on non-wasm targets" ) ; } unsafe { let idx = val . into_abi ( ) ; __widl_instanceof_Worker ( idx ) != 0 } } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Worker { obj : val . into ( ) } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Worker ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl From < Worker > for Object { # [ inline ] fn from ( obj : Worker ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Worker { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < Worker as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `new Worker(..)` constructor, creating a new instance of `Worker`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn new ( script_url : & str ) -> Result < Worker , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_new_Worker ( script_url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Worker as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_new_Worker ( script_url : < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Worker as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( script_url ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let script_url = < & str as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( script_url ) ; __widl_f_new_Worker ( script_url ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( < Worker as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn post_message ( & self , message : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_post_message_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_post_message_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( message ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message ) ; __widl_f_post_message_Worker ( self_ , message ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_with_transfer_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn post_message_with_transfer ( & self , message : & :: wasm_bindgen :: JsValue , transfer : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_post_message_with_transfer_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_post_message_with_transfer_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( message ) ; drop ( transfer ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message ) ; let transfer = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( transfer ) ; __widl_f_post_message_with_transfer_Worker ( self_ , message , transfer ) } ; wasm_bindgen :: __rt :: take_last_exception ( ) ? ; Ok ( ( ) ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_terminate_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `terminate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn terminate ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_terminate_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_terminate_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_terminate_Worker ( self_ ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessage_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onmessage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn onmessage ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmessage_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmessage_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_onmessage_Worker ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessage_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onmessage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessage ( & self , onmessage : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmessage_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmessage_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( onmessage ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let onmessage = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessage ) ; __widl_f_set_onmessage_Worker ( self_ , onmessage ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessageerror_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onmessageerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn onmessageerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onmessageerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onmessageerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_onmessageerror_Worker ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessageerror_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onmessageerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessageerror ( & self , onmessageerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onmessageerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onmessageerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( onmessageerror ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let onmessageerror = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessageerror ) ; __widl_f_set_onmessageerror_Worker ( self_ , onmessageerror ) } ; ( ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onerror_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn onerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_onerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_onerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: Abi { drop ( self_ ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; __widl_f_onerror_Worker ( self_ ) } ; < Option < :: js_sys :: Function > as wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret ) } } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onerror_Worker ( ) { use wasm_bindgen :: describe :: * ; wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Worker as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Worker { # [ allow ( bad_style ) ] # [ doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)\n\n*This API requires the following crate features to be activated: `Worker`*" ] # [ allow ( clippy :: all ) ] pub fn set_onerror ( & self , onerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] extern "C" { fn __widl_f_set_onerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] unsafe fn __widl_f_set_onerror_Worker ( self_ : < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onerror : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) { drop ( self_ ) ; drop ( onerror ) ; panic ! ( "cannot call wasm-bindgen imported functions on \
                            non-wasm targets" ) ; } unsafe { let _ret = { let self_ = < & Worker as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self ) ; let onerror = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onerror ) ; __widl_f_set_onerror_Worker ( self_ , onerror ) } ; ( ) } } } # [ allow ( non_upper_case_globals ) ] # [ cfg ( target_arch = "wasm32" ) ] # [ link_section = "__wasm_bindgen_unstable" ] # [ doc ( hidden ) ] # [ allow ( clippy :: all ) ] pub static __WASM_BINDGEN_GENERATED_839acf1851630544 : [ u8 ; 2270usize ] = { static _INCLUDED_FILES : & [ & str ] = & [ ] ; * b".\0\0\0{\"schema_version\":\"0.2.56\",\"version\":\"0.2.56\"}\xA8\x08\0\0\0\0\x18\0\0\x02\x0CMessageEvent\x1E__widl_instanceof_MessageEvent\0\0\0\0\x19__widl_f_new_MessageEvent\x01\0\0\x01\x0CMessageEvent\0\x01\x01\x05type_\x03new\0\0\0(__widl_f_init_message_event_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\0\x01\x02\x05self_\x05type_\x10initMessageEvent\0\0\05__widl_f_init_message_event_with_bubbles_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\0\x01\x03\x05self_\x05type_\x07bubbles\x10initMessageEvent\0\0\0D__widl_f_init_message_event_with_bubbles_and_cancelable_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\0\x01\x04\x05self_\x05type_\x07bubbles\ncancelable\x10initMessageEvent\0\0\0M__widl_f_init_message_event_with_bubbles_and_cancelable_and_data_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\0\x01\x05\x05self_\x05type_\x07bubbles\ncancelable\x04data\x10initMessageEvent\0\0\0X__widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\0\x01\x06\x05self_\x05type_\x07bubbles\ncancelable\x04data\x06origin\x10initMessageEvent\0\0\0j__widl_f_init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\0\x01\x07\x05self_\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x10initMessageEvent\0\0\0\x1A__widl_f_data_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\x01\x04data\x01\x01\x05self_\x04data\0\0\0\x1C__widl_f_origin_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\x01\x06origin\x01\x01\x05self_\x06origin\0\0\0#__widl_f_last_event_id_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\x01\x0BlastEventId\x01\x01\x05self_\x0BlastEventId\0\0\0\x1C__widl_f_source_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\x01\x06source\x01\x01\x05self_\x06source\0\0\0\x1B__widl_f_ports_MessageEvent\0\0\0\x01\x0CMessageEvent\x01\0\x01\x05ports\x01\x01\x05self_\x05ports\0\0\x02\x06Worker\x18__widl_instanceof_Worker\0\0\0\0\x13__widl_f_new_Worker\x01\0\0\x01\x06Worker\0\x01\x01\nscript_url\x03new\0\0\0\x1C__widl_f_post_message_Worker\x01\0\0\x01\x06Worker\x01\0\0\x01\x02\x05self_\x07message\x0BpostMessage\0\0\0*__widl_f_post_message_with_transfer_Worker\x01\0\0\x01\x06Worker\x01\0\0\x01\x03\x05self_\x07message\x08transfer\x0BpostMessage\0\0\0\x19__widl_f_terminate_Worker\0\0\0\x01\x06Worker\x01\0\0\x01\x01\x05self_\tterminate\0\0\0\x19__widl_f_onmessage_Worker\0\0\0\x01\x06Worker\x01\0\x01\tonmessage\x01\x01\x05self_\tonmessage\0\0\0\x1D__widl_f_set_onmessage_Worker\0\0\0\x01\x06Worker\x01\0\x02\tonmessage\x01\x02\x05self_\tonmessage\tonmessage\0\0\0\x1E__widl_f_onmessageerror_Worker\0\0\0\x01\x06Worker\x01\0\x01\x0Eonmessageerror\x01\x01\x05self_\x0Eonmessageerror\0\0\0\"__widl_f_set_onmessageerror_Worker\0\0\0\x01\x06Worker\x01\0\x02\x0Eonmessageerror\x01\x02\x05self_\x0Eonmessageerror\x0Eonmessageerror\0\0\0\x17__widl_f_onerror_Worker\0\0\0\x01\x06Worker\x01\0\x01\x07onerror\x01\x01\x05self_\x07onerror\0\0\0\x1B__widl_f_set_onerror_Worker\0\0\0\x01\x06Worker\x01\0\x02\x07onerror\x01\x02\x05self_\x07onerror\x07onerror\0\0\0\0\x18web-sys-681dbc44ea05d230\0" } ;